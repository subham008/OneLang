; ModuleID = 'win_sdl.c'
source_filename = "win_sdl.c"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-w64-windows-gnu"

%struct.SDL_Rect = type { i32, i32, i32, i32 }
%union.SDL_Event = type { %struct.SDL_SensorEvent, [8 x i8] }
%struct.SDL_SensorEvent = type { i32, i32, i32, [6 x float], i64 }

@WINDOW_WIDTH = dso_local constant i32 800, align 4
@WINDOW_HEIGHT = dso_local constant i32 600, align 4
@SQUARE_SIZE = dso_local constant i32 100, align 4
@.str = private unnamed_addr constant [41 x i8] c"SDL could not initialize! SDL_Error: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"SDL2 Blue Background with Red Square\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"Window could not be created! SDL_Error: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"Renderer could not be created! SDL_Error: %s\0A\00", align 1
@__const.main.fillRect = private unnamed_addr constant %struct.SDL_Rect { i32 350, i32 250, i32 100, i32 100 }, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca %union.SDL_Event, align 8
  %10 = alloca %struct.SDL_Rect, align 4
  store i32 0, ptr %3, align 4
  store i32 %0, ptr %4, align 4
  store ptr %1, ptr %5, align 8
  %11 = call i32 @SDL_Init(i32 noundef 32)
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = call ptr @SDL_GetError()
  %15 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %14)
  store i32 1, ptr %3, align 4
  br label %59

16:                                               ; preds = %2
  %17 = call ptr @SDL_CreateWindow(ptr noundef @.str.1, i32 noundef 536805376, i32 noundef 536805376, i32 noundef 800, i32 noundef 600, i32 noundef 4)
  store ptr %17, ptr %6, align 8
  %18 = load ptr, ptr %6, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = call ptr @SDL_GetError()
  %22 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, ptr noundef %21)
  call void @SDL_Quit()
  store i32 1, ptr %3, align 4
  br label %59

23:                                               ; preds = %16
  %24 = load ptr, ptr %6, align 8
  %25 = call ptr @SDL_CreateRenderer(ptr noundef %24, i32 noundef -1, i32 noundef 2)
  store ptr %25, ptr %7, align 8
  %26 = load ptr, ptr %7, align 8
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %32

28:                                               ; preds = %23
  %29 = call ptr @SDL_GetError()
  %30 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef %29)
  %31 = load ptr, ptr %6, align 8
  call void @SDL_DestroyWindow(ptr noundef %31)
  call void @SDL_Quit()
  store i32 1, ptr %3, align 4
  br label %59

32:                                               ; preds = %23
  store i32 0, ptr %8, align 4
  br label %33

33:                                               ; preds = %46, %32
  %34 = load i32, ptr %8, align 4
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  br i1 %36, label %37, label %56

37:                                               ; preds = %33
  br label %38

38:                                               ; preds = %45, %37
  %39 = call i32 @SDL_PollEvent(ptr noundef %9)
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  %42 = load i32, ptr %9, align 8
  %43 = icmp eq i32 %42, 256
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  store i32 1, ptr %8, align 4
  br label %45

45:                                               ; preds = %44, %41
  br label %38, !llvm.loop !5

46:                                               ; preds = %38
  %47 = load ptr, ptr %7, align 8
  %48 = call i32 @SDL_SetRenderDrawColor(ptr noundef %47, i8 noundef 0, i8 noundef 0, i8 noundef -1, i8 noundef -1)
  %49 = load ptr, ptr %7, align 8
  %50 = call i32 @SDL_RenderClear(ptr noundef %49)
  %51 = load ptr, ptr %7, align 8
  %52 = call i32 @SDL_SetRenderDrawColor(ptr noundef %51, i8 noundef -1, i8 noundef 0, i8 noundef 0, i8 noundef -1)
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %10, ptr align 4 @__const.main.fillRect, i64 16, i1 false)
  %53 = load ptr, ptr %7, align 8
  %54 = call i32 @SDL_RenderFillRect(ptr noundef %53, ptr noundef %10)
  %55 = load ptr, ptr %7, align 8
  call void @SDL_RenderPresent(ptr noundef %55)
  br label %33, !llvm.loop !7

56:                                               ; preds = %33
  %57 = load ptr, ptr %7, align 8
  call void @SDL_DestroyRenderer(ptr noundef %57)
  %58 = load ptr, ptr %6, align 8
  call void @SDL_DestroyWindow(ptr noundef %58)
  call void @SDL_Quit()
  store i32 0, ptr %3, align 4
  br label %59

59:                                               ; preds = %56, %28, %20, %13
  %60 = load i32, ptr %3, align 4
  ret i32 %60
}

declare dso_local i32 @SDL_Init(i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #5
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

declare dso_local ptr @SDL_GetError() #1

declare dso_local ptr @SDL_CreateWindow(ptr noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef) #1

declare dso_local void @SDL_Quit() #1

declare dso_local ptr @SDL_CreateRenderer(ptr noundef, i32 noundef, i32 noundef) #1

declare dso_local void @SDL_DestroyWindow(ptr noundef) #1

declare dso_local i32 @SDL_PollEvent(ptr noundef) #1

declare dso_local i32 @SDL_SetRenderDrawColor(ptr noundef, i8 noundef, i8 noundef, i8 noundef, i8 noundef) #1

declare dso_local i32 @SDL_RenderClear(ptr noundef) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @SDL_RenderFillRect(ptr noundef, ptr noundef) #1

declare dso_local void @SDL_RenderPresent(ptr noundef) #1

declare dso_local void @SDL_DestroyRenderer(ptr noundef) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #3

; Function Attrs: nounwind
declare dso_local i32 @__mingw_vfprintf(ptr noundef, ptr noundef, ptr noundef) #4

declare dllimport ptr @__acrt_iob_func(i32 noundef) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #3

attributes #0 = { noinline nounwind optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nocallback nofree nosync nounwind willreturn }
attributes #4 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 2}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 1, !"MaxTLSAlign", i32 65536}
!4 = !{!"clang version 17.0.6"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = distinct !{!7, !6}
